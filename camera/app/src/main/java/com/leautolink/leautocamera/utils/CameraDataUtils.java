package com.leautolink.leautocamera.utils;import android.app.Activity;import com.leautolink.leautocamera.R;import com.leautolink.leautocamera.callback.DelFileCallBack;import com.leautolink.leautocamera.config.Config;import com.leautolink.leautocamera.domain.ListingInfo;import com.leautolink.leautocamera.domain.respone.UpLoadResponse;import com.leautolink.leautocamera.net.http.GsonUtils;import com.leautolink.leautocamera.net.http.OkHttpRequest;import com.leautolink.leautocamera.net.http.httpcallback.DownLoadCallBack;import com.leautolink.leautocamera.net.http.httpcallback.UploadFileCallBack;import com.letv.leauto.cameracmdlibrary.connect.RemoteCamHelper;import com.letv.leauto.cameracmdlibrary.connect.model.CameraMessage;import com.letv.leauto.cameracmdlibrary.connect.model.CameraMessageCallback;import com.letv.leauto.cameracmdlibrary.connect.model.CommandID;import org.json.JSONObject;import java.io.File;import java.io.IOException;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import okhttp3.Call;import okhttp3.Response;/** * Created by shimeng on 14/7/20. */public class CameraDataUtils {    private static final String TAG = "CameraDataUtils";    Activity mActivity;    String zipPath;    private List<ListingInfo.FileInfo> mDownloadFileDataInfos;    private int currentExecuteCount = 0;    private int succeedCount = 0;    private UpLoadResponse mUpLoadResponse;    String uploadFile;    public void CameraDataUtils() {    }    /**     * 从记录仪上获取sdcard数据     */    public void getSdCardDataFromCamera(final Activity activity) {        mActivity = activity;        Logger.i(TAG, "getSdCardDataFromCamera()");        CameraMessage getLSMessage = new CameraMessage(CommandID.AMBA_LS_NEW, new CameraMessageCallback() {            @Override            public void onReceiveErrorMessage(CameraMessage cameraMessage, JSONObject jsonObject) {                Logger.e(TAG, "onReceiveErrorMessage" + jsonObject.toString());            }            private ListingInfo mDataListingInfo;            @Override            public void onReceiveMessage(CameraMessage cameraMessage, JSONObject jsonObject) {                Logger.e(TAG, "onReceiveMessage:" + jsonObject.toString());                mDataListingInfo = GsonUtils.fromJson(jsonObject.toString(), ListingInfo.class);                Logger.i(TAG, "排序前的  EventListingInfo:" + mDataListingInfo.toString());                //显示暂无数据                if (mDataListingInfo != null && 0 == mDataListingInfo.getListing().size()) {                    Logger.i(TAG, "排序前的EventListingInfo没有数据!");                } else {                    //排序                    new SequenceUtils().sequencePureDatas(mDataListingInfo.getListing());                    Logger.i(TAG, "排序后的  EventListingInfo:" + mDataListingInfo.toString());                    //只初始化Event页的数据                    downloadsSDcardData(mDataListingInfo);                }            }            @Override            public void onReceiveNotification(JSONObject jsonObject) {            }        });        getLSMessage.put("token", 2);        getLSMessage.putParam("list");        getLSMessage.put("type", "data");        RemoteCamHelper.getRemoteCam().sendCommand(getLSMessage);    }    private void resetDataAfterBatchOption() {        if (mDownloadFileDataInfos != null) {            mDownloadFileDataInfos.clear();            mDownloadFileDataInfos = null;        }        currentExecuteCount = 0;        succeedCount = 0;    }    void downloadsSDcardData(ListingInfo listInfo) {        mDownloadFileDataInfos = new ArrayList<>();        if (listInfo != null && listInfo.getListing().size() > 0) {            for (int i = 0; i < listInfo.getListing().size(); i++) {                mDownloadFileDataInfos.add(listInfo.getListing().get(i));            }        } else {            Logger.i(TAG, "没有要下载的文件");        }        if (mDownloadFileDataInfos != null && mDownloadFileDataInfos.size() > 0) {            Logger.i(TAG, "要下载文件的列表：" + mDownloadFileDataInfos.toString());            downloadSDcardDataSingle(mDownloadFileDataInfos);        }    }    private void downloadSDcardDataSingle(final List<ListingInfo.FileInfo> downloadFileInfos) {        if (downloadFileInfos.size() > 0 && currentExecuteCount < downloadFileInfos.size()) {            final ListingInfo.FileInfo currentDownloadFileInfo = downloadFileInfos.get(currentExecuteCount);            String currantFileName = currentDownloadFileInfo.getFilename();            OkHttpRequest.downLoad("batchdownload", UrlUtils.getCameraMvideoHttpUrl("data", currantFileName), UrlUtils.getTargetDataPath(mActivity, currantFileName.substring(0, 8)), currantFileName, SdCardUtils.getSdSize(mActivity, SdCardUtils.TYPE_AVAIABLE), new DownLoadCallBack() {                @Override                public void onFailure(Call call, IOException e) {                    if ((currentExecuteCount + 1) == downloadFileInfos.size()) {                        ToastUtils.showToast(mActivity, mActivity.getResources().getString(R.string.download_success) + succeedCount + mActivity.getResources().getString(R.string.download_item1) + downloadFileInfos.size() + mActivity.getResources().getString(R.string.download_item2), ToastUtils.SHORT);                        Logger.e(TAG,  "下载成功" + succeedCount + "个 / 共" + downloadFileInfos.size() + "个");                    } else {                        currentExecuteCount += 1;                        downloadSDcardDataSingle(downloadFileInfos);                    }                }                @Override                public void onStart(long total) {                    Logger.i(TAG, "onStart:" + total);                }                @Override                public void onLoading(long current, long total) {                    double percentage = ((double) current / total) * 100;                    DecimalFormat df = new DecimalFormat("##.##");                    String percentageStr = df.format((percentage));                    Logger.e(TAG, "percentageStr=" + percentageStr + "%");                }                @Override                public void onSucceed() {                    String fileName = currentDownloadFileInfo.getFilename();                    deleteRemouteFile(currentDownloadFileInfo);                    String sourceFilePath = UrlUtils.getTargetDataPath(mActivity, fileName.substring(0, 8));                    zipPath = UrlUtils.getTargetPath("data", mActivity);                    FileUtils.FilesToZip(sourceFilePath, zipPath, fileName.substring(0, 8));                    // OkHttpRequest.deleteIntactFile(sourceFilePath + "/" + downloadFileInfos.get(currentExecuteCount).getFilename());                    succeedCount += 1;                    if ((currentExecuteCount + 1) == downloadFileInfos.size()) {                        Logger.e(TAG, "下载成功" + succeedCount + "个 / 共" + downloadFileInfos.size() + "个");                        resetDataAfterBatchOption();                        File DataDir = new File(zipPath);                        String[] children = DataDir.list();                        //递归删除目录中的子目录下                        for (int i = 0; i < children.length; i++) {                            if (!children[i].toString().contains(".zip")) {                                FileUtils.deleteDirPath(children[i].toString());                                FileUtils.doDeleteEmptyDir(children[i].toString());                            }                        }                    } else {                        currentExecuteCount += 1;                        Logger.e(TAG, "正在下载第" + currentExecuteCount + "个");                        downloadSDcardDataSingle(downloadFileInfos);                    }                }                @Override                public void onSdCardLackMemory(long total, long avaiable) {                    resetDataAfterBatchOption();                    OkHttpRequest.cancelSameTagCall("batchdownload");                }                @Override                public void onCancel() {                    OkHttpRequest.cancelSameTagCall("batchdownload");                    //ToastUtils.showToast(CameraGalleryActivity.this, "下载已取消，已下载" + succeedCount + "个", ToastUtils.SHORT);                    //删除下载不完整的文件                    OkHttpRequest.deleteIntactFile(UrlUtils.getTargetDataPath(mActivity, currentDownloadFileInfo.getFilename().substring(0, 8)) + "/" + downloadFileInfos.get(currentExecuteCount).getFilename());                    resetDataAfterBatchOption();                }                @Override                public void onError(IOException e) {                    OkHttpRequest.cancelSameTagCall("batchdownload");                    if (downloadFileInfos != null && downloadFileInfos.size() > 0) {                        OkHttpRequest.deleteIntactFile(UrlUtils.getTargetDataPath(mActivity, currentDownloadFileInfo.getFilename().substring(0, 8)) + "/" + downloadFileInfos.get(currentExecuteCount).getFilename());                    }                    resetDataAfterBatchOption();                }            });        }    }    private void deleteRemouteFile(final ListingInfo.FileInfo deleteFileInfos) {        final ListingInfo.FileInfo file = deleteFileInfos;        Logger.e(TAG, "删除文件:" + UrlUtils.getDeleteCameraFileUrl("data", file.getFilename()) );        DelUtils.deleteCameraSingle(mActivity, UrlUtils.getDeleteCameraFileUrl("data", file.getFilename()), new DelFileCallBack() {            @Override            public void onFailure() {                Logger.e(TAG, "删除记录仪文件失败!");            }            @Override            public void onSucceed() {                Logger.e(TAG, "删除记录仪文件成功!");            }        });    }    /**     * data打包数据     */    public void UploadDataZipFiles(Activity mActivity) {        String zipPath = UrlUtils.getTargetPath("data", mActivity);        Logger.i(TAG, "UploadDataFile:zipPath=" + zipPath);        File DataDir = new File(zipPath);        String[] children = DataDir.list();        //递归删除目录中的子目录下        for (int i = 0; i < children.length; i++) {            if (children[i].toString().contains(".zip")) {                uploadFile = zipPath + "/" + children[i].toString();                UploadDataFile(mActivity, children[i].toString());            }        }    }    private void UploadDataFile(Activity mActivity, String filName) {        Logger.i(TAG, "UploadDataFile:filName=" + filName);        OkHttpRequest.uploadFile("upload", Config.DATA_UP_URL, UrlUtils.getDeletLocalFileUrl(mActivity, "data", filName), null, new UploadFileCallBack() {            @Override            public void onStart(long total) {                Logger.e(TAG, "上传中...");            }            @Override            public void onLoading(long total, long current) {                double percentage = ((double) current / total) * 100;                DecimalFormat df = new DecimalFormat("##.##");                String percentageStr = df.format((percentage));                Logger.e(TAG, "上传中...current=" + current + ",total=" + total + ",百分比为:" + percentageStr + "%");            }            @Override            public void onFinish() {                Logger.e(TAG, "上传完成...");            }            @Override            public void onResponse(Call call, Response response) {                Logger.i(TAG, "onResponse  :response:" + response.toString());                if (response.code() == 200 && response.message().equals("Ok")) {                    FileUtils.deleteDirPath(uploadFile);                }            }            @Override            public void onCancel() {                CustomDialogUtils.hideCustomDialog();                Logger.e(TAG, "上传已取消");            }            @Override            public void onTimeOut() {                CustomDialogUtils.hideCustomDialog();            }            @Override            public void onFailure(Call call, IOException e) {                Logger.e(TAG, "上传出错，请检查网络设置");            }            @Override            public void onError(Object e) {                CustomDialogUtils.hideCustomDialog();            }        });    }}